.. highlight:: sh

.. |vpicc| replace:: :abbr:`vpicc (virtual smart card)`
.. |vpcd| replace:: :abbr:`vpcd (virtual smart card reader)`
.. |BAC| replace:: :abbr:`BAC (Basic Access Control)`
.. |PACE| replace:: :abbr:`PACE (Password Authenticated Connection Establishment)`
.. |TA| replace:: :abbr:`TA (Terminal Authenticatation)`
.. |CA| replace:: :abbr:`CA (Chip Authentication)`
.. |EAC| replace:: :abbr:`EAC (Extended Access Control)`

.. _vicc:

################################################################################
@PACKAGE_NAME@
################################################################################

:Authors:
    - `Frank Morgner <morgner@informatik.hu-berlin.de>`_
    - `Dominik Oepen <oepen@informatik.hu-berlin.de>`_
:License:
    GPL version 3
:Tested Platforms:
    - Linux (Debian, Ubuntu, OpenMoko)
    - Windows (|vpicc| natively, |vpcd| only via Cygwin)
:Potential Platforms:
    Unix-like operating systems (Mac OS, Solaris, BSD, ...)

@PACKAGE_NAME@ emulates a smart card and makes it accessible through PC/SC.
Currently the @PACKAGE_NAME@ supports the following types of smart cards:

- Generic ISO-7816 smart card including secure messaging
- German electronic identity card (nPA) with complete support for |EAC| (|PACE|, |TA|, |CA|)
- German electronic passport (ePass) with complete support for |BAC|
- Cryptoflex smart card (incomplete)
      
The |vpcd| is a smart card driver for PCSC-Lite_. It allows
smart card applications to access the |vpicc| through the PC/SC API.  By
default |vpicc| communicates with |vpcd| through a socket on localhost port
35963. But the |vpicc| does not need to run on the same machine as the |vpcd|,
they can connect over the internet for example.

Although the @PACKAGE_NAME@ is a software emulator, you can use
:ref:`pcsc-relay` to make it accessible to an external contact-less smart card
reader.

The file :file:`utils.py` was taken from Henryk Pl√∂tz's cyberflex-shell_.


.. include:: relay-note.txt


.. include:: download.txt


.. include:: autotools.txt

Depending on your usage of the |vpicc| you might or might not need
the following:

- Python_
- pyscard_
- PyCrypto_
- PBKDF2_
- PIP_
- OpenPACE_ (nPA emulation)

The |vpcd| depends on PCSC-Lite_.


********************************************************************************
Running the @PACKAGE_NAME@
********************************************************************************

Fitxt you need to make sure that :command:`pcscd` loads the |vpcd|. You might
need to run :command:`update-reader.conf` to update its configuration file.
Then :command:`pcscd -f -d` should say something like "Attempting startup of
Virtual PCD"

Now you can run :command:`vicc` which connects to the |vpcd|. The command
:command:`vicc --help` gives an overview about the command line options.

.. program-output:: vicc --help

You should now be able to access the |vpicc| through the PC/SC API via
|vpcd|/:command:`pcscd`. You can use the :command:`opensc-explorer` or
:command:`pcsc_scan` for testing.


================================================================================
Accessing the @PACKAGE_NAME@ from Windows applications
================================================================================

Running |vpcd| under Windows is currently not supported, because it implements
a smart card driver specific for PCSC-Lite (:command:`pcscd`). This means, that
although you can run |vpicc| under Windows (for example in relay mode), it
can't be accessed by Windows' smart card applications.

However, there are several more or less complicated paths you can go:

- Run |vpcd|/:command:`pcscd` in Linux and use :ref:`pcsc-relay` to forward the
  |vpicc| via NFC to a contactless reader which is attached to the Windows
  machine. This has been tested tested with a ACR122U (touchatag).
- Run your windows machine as virtual machine in a Linux host. Then run
  |vpcd|/:command:`pcscd` in the Linux host and grab the |vpicc| with the
  :ref:`ccid-emulator`. Now forward the emulated USB device to the Windows VM.
  This is easy, but the :ref:`ccid-emulator` is not tested very well under
  Windows.
- Use the combination above (|vpcd|/:ref:`ccid-emulator` under Linux) on a
  device, that you can put in USB client mode. Then use a USB connector to
  physically connect the Linux machine in client mode to the Windows machine.
- Port the |vpcd| from PCSC-Lite to Windows' PC/SC service. Then, |vpcd| runs
  natively under Windows. Although |vpcd| is relatively simple and should be
  POSIX compliant, this could be a lot of work.
- Run |vpcd|/:command:`pcscd` under Cygwin on the Windows machine. This has
  been reported to work, but it is unclear whether you can use PCSC-Lite as
  PC/SC provider for a native Windows application.


.. include:: questions.txt


********************
Notes and References
********************

.. target-notes::

.. _cyberflex-shell: https://github.com/henryk/cyberflex-shell
.. _PCSC-lite: http://pcsclite.alioth.debian.org/
.. _Python: http://www.python.org/
.. _pyscard: http://pyscard.sourceforge.net/
.. _PyCrypto: http://pycrypto.org/
.. _PBKDF2: https://www.dlitz.net/software/python-pbkdf2/
.. _PIP: http://www.pythonware.com/products/pil/
.. _OpenPACE: http://openpace.sourceforge.net
